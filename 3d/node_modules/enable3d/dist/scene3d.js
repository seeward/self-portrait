"use strict";
/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2020 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|GNU GPLv3}
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("@enable3d/three-wrapper/dist/index");
const Plugins = require("@enable3d/three-graphics/dist/plugins/index");
// https://www.typescriptlang.org/docs/handbook/utility-types.html Pick<T,K>
// export class Scene3D implements Partial<ThreeGraphics> {
class Scene3D {
    constructor(sceneConfig = {}) {
        this.sceneConfig = sceneConfig;
        // core modules from three-graphics
        this.scenes = new Map();
        this.__config = {};
        this._isRunning = false;
        this._deconstructorFunctions = [];
        const { key = Math.random().toString(), enableXR = false } = sceneConfig;
        this.__config.sceneKey = key;
        this.__config.enableXR = enableXR;
    }
    get deconstructor() {
        return {
            add: (fnc) => {
                this._deconstructorFunctions.push(fnc);
            }
        };
    }
    // @ts-ignore
    initializeScene(plugins) {
        const { renderer, parent, canvas, scene, scenes, camera, cache, physics, sceneConfig } = plugins;
        this.scene = scene;
        this.scenes = scenes;
        this.camera = camera;
        this.cache = cache;
        this.physics = physics;
        this.renderer = renderer;
        this.parent = parent;
        this.canvas = canvas;
        const { autoStart, textureAnisotropy } = sceneConfig;
        // plugins
        this.load = new Plugins.Loaders(this.cache, textureAnisotropy);
        this.lights = new Plugins.Lights(this.scene);
        this.transform = new Plugins.Transform(this.camera, this.renderer);
        this.csg = new Plugins.CSG(this.scene, this.transform);
        this.heightMap = new Plugins.HeightMap(this.scene);
        this.factories = new Plugins.Factories(this.scene);
        this.misc = new Plugins.Misc(this.scene, this.renderer, this.factories);
        this.ws = new Plugins.WarpSpeed(scene, renderer, camera, this.lights, this.physics, this.load, this.factories);
        this.mixers = new Plugins.Mixers();
        this.cameras = new Plugins.Cameras();
        this.clock = new index_1.Clock();
        // add vr camera
        if (this.__config.enableXR) {
            this.webXR = new Plugins.WebXR(this.renderer, this.scene, this.camera);
        }
        if (autoStart)
            this.start(this.__config.sceneKey);
    }
    get sceneKey() {
        return this.__config.sceneKey;
    }
    /** Destroys a object and its body. */
    destroy(obj) {
        var _a;
        (_a = this.physics) === null || _a === void 0 ? void 0 : _a.destroy(obj.body);
        this.scene.remove(obj);
        // @ts-ignore
        obj = null;
    }
    warpSpeed(...features) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.ws.warpSpeed(...features);
        });
    }
    get animationMixers() {
        return this.mixers.mixers;
    }
    get make() {
        return this.factories.make;
    }
    get add() {
        return this.factories.add;
    }
    haveSomeFun(numberOfElements = 20) {
        Plugins.HaveSomeFun(numberOfElements, this.physics);
    }
    isRunning() {
        return this._isRunning;
    }
    start(key, data) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            // start another scene
            // and stop this one
            if (key && key !== this.__config.sceneKey) {
                this.stop();
                (_a = this.scenes.get(key)) === null || _a === void 0 ? void 0 : _a._start(data);
            }
            else {
                this._start(data);
            }
        });
    }
    _start(data) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_b = (_a = this).init) === null || _b === void 0 ? void 0 : _b.call(_a, data));
            yield this._preload();
            yield this._create();
            // console.log('start')
            this.renderer.setAnimationLoop(() => {
                this._update();
            });
            this._isRunning = true;
        });
    }
    restart(data) {
        return __awaiter(this, void 0, void 0, function* () {
            this.stop();
            this.start(this.__config.sceneKey, data);
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            this._isRunning = false;
            this.renderer.setAnimationLoop(null);
            // reset clock
            this.clock.start();
            for (let i = 0; i < this._deconstructorFunctions.length; i++) {
                yield this._deconstructorFunctions[i]();
            }
            this._deconstructorFunctions = [];
            // destroy all rigid bodies
            for (let i = this.physics.rigidBodies.length - 1; i >= 0; i--) {
                this.physics.destroy(this.physics.rigidBodies[i]);
            }
            // destroy all three objects
            for (let i = this.scene.children.length - 1; i >= 0; i--) {
                this.scene.remove(this.scene.children[i]);
            }
        });
    }
    setSize(width, height) {
        this.renderer.setSize(width, height);
        // @ts-ignore
        if (typeof this.camera.aspect !== 'undefined')
            this.camera.aspect = width / height;
        this.camera.updateProjectionMatrix();
    }
    setPixelRatio(ratio) {
        this.renderer.setPixelRatio(ratio);
    }
    // public get controls() {
    //   return {
    //     pointerDrag: (autoStart = true) => new PointerDrag(this.canvas, autoStart),
    //     pointerLock: (autoLock = true) => new PointerLock(this.canvas, autoLock),
    //     joystick: () => new JoyStick(),
    //     firstPerson: (target: ExtendedObject3D, config: FirstPersonControlsConfig = {}) =>
    //       new FirstPersonControls(this.camera, target, config),
    //     thirdPerson: (target: ExtendedObject3D, config: ThirdPersonControlsConfig = {}) =>
    //       new ThirdPersonControls(this.camera, target, config)
    //   }
    // }
    // @ts-ignore
    init(data = {}) { }
    preload() { }
    create() { }
    update(_time, _delta) { }
    _preload() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_b = (_a = this).preload) === null || _b === void 0 ? void 0 : _b.call(_a));
        });
    }
    _create() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_b = (_a = this).create) === null || _b === void 0 ? void 0 : _b.call(_a));
        });
    }
    _update() {
        var _a, _b, _c, _d;
        const delta = this.clock.getDelta() * 1000;
        const time = this.clock.getElapsedTime();
        (_b = (_a = this).update) === null || _b === void 0 ? void 0 : _b.call(_a, parseFloat(time.toFixed(3)), parseInt(delta.toString()));
        (_c = this.physics) === null || _c === void 0 ? void 0 : _c.update(delta);
        (_d = this.physics) === null || _d === void 0 ? void 0 : _d.updateDebugger();
        this.animationMixers.update(delta);
        if (this.composer)
            this.composer.render();
        else
            this.renderer.render(this.scene, this.camera);
    }
}
exports.Scene3D = Scene3D;
//# sourceMappingURL=scene3d.js.map