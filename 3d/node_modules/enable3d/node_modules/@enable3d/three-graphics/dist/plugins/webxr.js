"use strict";
/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2020 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|GNU GPLv3}
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = require("@enable3d/three-wrapper/dist/index");
class WebXR {
    constructor(_renderer, _scene, _camera) {
        // https://medium.com/samsung-internet-dev/vr-locomotion-740dafa85914
        this._renderer = _renderer;
        this._scene = _scene;
        this._camera = _camera;
        this.controllerModelFactory = new THREE.XRControllerModelFactory();
        // const geo = new THREE.SphereGeometry(0.5)
        // const mat = new THREE.MeshLambertMaterial({ color: 0xff0000 })
        // this.dot = new THREE.Mesh(geo, mat)
        // this.dot.position.set(0, 1, 0)
        this.cameraGroup = new THREE.Group();
        this.cameraGroup.add(_camera);
        _scene.add(this.cameraGroup);
        _renderer.xr.enabled = true;
        // add vr button
        const vrButton = THREE.VRButton.createButton(_renderer);
        vrButton.style.cssText += 'background: rgba(0, 0, 0, 0.8); ';
        document.body.appendChild(vrButton);
    }
    get isPresenting() {
        var _a, _b;
        return !!((_b = (_a = this._renderer) === null || _a === void 0 ? void 0 : _a.xr) === null || _b === void 0 ? void 0 : _b.isPresenting);
    }
    getController(id) {
        const controller = this._renderer.xr.getController(id);
        this.cameraGroup.add(controller);
        return controller;
    }
    getControllerGrip(id) {
        const controllerGrip = this._renderer.xr.getControllerGrip(id);
        const model = this.controllerModelFactory.createControllerModel(controllerGrip);
        controllerGrip.add(model);
        this.cameraGroup.add(controllerGrip);
        return controllerGrip;
    }
    getControllerRay(data) {
        // https://github.com/mrdoob/three.js/blob/master/examples/webxr_vr_ballshooter.html
        const { targetRayMode } = data;
        if (targetRayMode === 'tracked-pointer') {
            let geometry = new THREE.BufferGeometry();
            geometry.setAttribute('position', new THREE.Float32BufferAttribute([0, 0, 0, 0, 0, -1], 3));
            geometry.setAttribute('color', new THREE.Float32BufferAttribute([1, 0, 0, 1, 1, 1], 3));
            let material = new THREE.LineBasicMaterial({
                vertexColors: true
            });
            return new THREE.Line(geometry, material);
        }
        if (targetRayMode === 'gaze') {
            let geometry = new THREE.RingBufferGeometry(0.02, 0.04, 32).translate(0, 0, -1);
            let material = new THREE.MeshBasicMaterial({ color: 'red', opacity: 0.5, transparent: true });
            return new THREE.Mesh(geometry, material);
        }
        return;
    }
    get camera() {
        return this.WebXRCamera;
    }
    get WebXRCamera() {
        var _a;
        return {
            group: this.cameraGroup,
            position: (_a = this.cameraGroup) === null || _a === void 0 ? void 0 : _a.position,
            rotation: this.isPresenting ? this._renderer.xr.getCamera(this._camera).rotation : undefined,
            getWorldDirection: (target) => this.isPresenting ? this._renderer.xr.getCamera(this._camera).getWorldDirection(target) : undefined
        };
    }
}
exports.default = WebXR;
//# sourceMappingURL=webxr.js.map