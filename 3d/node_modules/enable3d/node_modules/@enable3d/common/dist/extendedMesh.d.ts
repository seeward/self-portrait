/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2020 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|GNU GPLv3}
 */
import { Mesh, Geometry, BufferGeometry, Material } from '@enable3d/three-wrapper/dist/index';
import PhysicsBody from './physicsBody';
export interface ExtendedMesh extends Mesh {
}
export declare class ExtendedMesh extends Mesh {
    private vector3;
    readonly isGroup = false;
    shape: string;
    name: string;
    body: PhysicsBody;
    hasBody: boolean;
    fragmentDepth: number;
    breakable: boolean;
    constructor(geometry?: Geometry | BufferGeometry | undefined, material?: Material | Material[] | undefined);
    /** Returns all values relative to the world. */
    get world(): {
        theta: number;
        phi: number;
    };
    /** Get the theta relative to the world. */
    private get worldTheta();
    /** Get the phi relative to the world. */
    private get worldPhi();
}
//# sourceMappingURL=extendedMesh.d.ts.map