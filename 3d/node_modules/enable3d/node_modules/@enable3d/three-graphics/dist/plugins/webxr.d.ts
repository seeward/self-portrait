/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2020 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|GNU GPLv3}
 */
import * as THREE from '@enable3d/three-wrapper/dist/index';
export default class WebXR {
    private _renderer;
    private _scene;
    private _camera;
    cameraGroup: THREE.Group;
    controllerModelFactory: THREE.XRControllerModelFactory;
    constructor(_renderer: THREE.WebGLRenderer, _scene: THREE.Scene, _camera: THREE.PerspectiveCamera | THREE.OrthographicCamera);
    get isPresenting(): boolean;
    getController(id: number): THREE.Group;
    getControllerGrip(id: number): THREE.Group;
    getControllerRay(data: any): THREE.Line<THREE.BufferGeometry, THREE.LineBasicMaterial> | THREE.Mesh<THREE.BufferGeometry, THREE.MeshBasicMaterial> | undefined;
    get camera(): {
        group: THREE.Group;
        position: THREE.Vector3;
        rotation: THREE.Euler | undefined;
        getWorldDirection: (target: THREE.Vector3) => THREE.Vector3 | undefined;
    };
    private get WebXRCamera();
}
//# sourceMappingURL=webxr.d.ts.map