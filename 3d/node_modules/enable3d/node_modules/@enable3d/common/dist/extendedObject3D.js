"use strict";
/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2020 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|GNU GPLv3}
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtendedObject3D = void 0;
const index_1 = require("@enable3d/three-wrapper/dist/index");
/**
 * Extends the Object3D class from THREE.js and implements properties from Line, Mesh and Points.
 */
class ExtendedObject3D extends index_1.Object3D {
    constructor() {
        super();
        this.vector3 = new index_1.Vector3();
        this.isGroup = false;
        this.hasBody = false;
        this.anims = {}; // deprecated
        this._currentAnimation = '';
        this._animationActions = new Map();
        this.name = `object-${this.id}`;
    }
    /** setAction(name) is deprecated. Use animation.play(name) instead! */
    setAction(name) {
        console.warn('[enable3d] setAction(name) is deprecated. Use animation.play(name) instead!');
        this.animationPlay(name);
    }
    /** Returns all values relative to the world. */
    get world() {
        return {
            theta: this.worldTheta,
            phi: this.worldPhi
        };
    }
    /** Get the theta relative to the world. */
    get worldTheta() {
        this.getWorldDirection(this.vector3);
        return Math.atan2(this.vector3.x, this.vector3.z);
    }
    /** Get the phi relative to the world. */
    get worldPhi() {
        this.getWorldDirection(this.vector3);
        return Math.acos(this.vector3.y);
    }
    get animation() {
        return {
            current: this._currentAnimation,
            add: (key, animation) => this.animationAdd(key, animation),
            play: (name, transitionDuration = 500, loop = true) => this.animationPlay(name, transitionDuration, loop),
            mixer: this.animationMixer
        };
    }
    set animationMixer(animationMixer) {
        this._animationMixer = animationMixer;
    }
    get animationMixer() {
        if (!this._animationMixer)
            this._animationMixer = new index_1.AnimationMixer(this);
        return this._animationMixer;
    }
    animationAdd(key, animation) {
        this._animationActions.set(key, this.animationMixer.clipAction(animation));
    }
    animationPlay(name, transitionDuration = 500, loop = true) {
        const next = this._animationActions.get(name);
        const current = this._animationActions.get(this._currentAnimation);
        if (next) {
            next.reset();
            if (current) {
                next.crossFadeFrom(current, transitionDuration / 1000, true);
                next.clampWhenFinished = true;
            }
            if (!loop)
                next.setLoop(index_1.LoopOnce, 0);
            next.play();
        }
        this._currentAnimation = name;
    }
}
exports.ExtendedObject3D = ExtendedObject3D;
exports.default = ExtendedObject3D;
//# sourceMappingURL=extendedObject3D.js.map