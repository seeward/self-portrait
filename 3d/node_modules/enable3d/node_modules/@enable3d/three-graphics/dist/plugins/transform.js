"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("@enable3d/three-wrapper/dist/index");
const index_2 = require("@enable3d/three-wrapper/dist/index");
/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2020 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|GNU GPLv3}
 */
class Transform {
    constructor(camera, renderer) {
        this.camera = camera;
        this.renderer = renderer;
    }
    geometryToBufferGeometry(geometry) {
        // @ts-ignore
        if (geometry.isGeometry)
            return new index_1.BufferGeometry().fromGeometry(geometry);
        else
            return geometry;
    }
    bufferGeometryToGeometry(bufferGeometry) {
        // @ts-ignore
        if (bufferGeometry.isBufferGeometry)
            return new index_1.Geometry().fromBufferGeometry(bufferGeometry);
        else
            return bufferGeometry;
    }
    /**
     * Transforms your svg files to paths.
     */
    fromSVGtoShape(svg, isCCW = false, noHoles) {
        if (svg) {
            const svgLoader = new index_2.SVGLoader();
            const shapes = [];
            svgLoader.parse(svg).paths.forEach(path => {
                path.toShapes(isCCW, noHoles).forEach(shape => {
                    shapes.push(shape);
                });
            });
            return shapes;
        }
        return [];
    }
    from3dto2d(position) {
        const vector3 = new index_1.Vector3(position.x, position.y, position.z);
        const canvas = this.renderer.domElement;
        // map to normalized device coordinate (NDC) space
        this.camera.updateMatrixWorld();
        vector3.project(this.camera);
        // map to 2D screen space
        const x = Math.round((vector3.x + 1) * (canvas.width / 2));
        const y = Math.round((-vector3.y + 1) * (canvas.height / 2));
        return new index_1.Vector2(x, y);
    }
    /**
     *
     * @param x X coordinate in normalized device coordinate (NDC) (-1 to +1).
     * @param y Y coordinate in normalized device coordinate (NDC) (-1 to +1).
     * @param distanceFromCamera The distance from the camera.
     */
    from2dto3d(x, y, distanceFromCamera) {
        var _a;
        // initialize temporary variables
        if (!this.tmpPlane) {
            const geo = new index_1.PlaneBufferGeometry(10000, 10000);
            const mat = new index_1.MeshBasicMaterial({ transparent: true, opacity: 0.25 });
            this.tmpPlane = new index_1.Mesh(geo, mat);
            this.tmpPlane.name = '_tmp_raycast_plane';
        }
        if (!this.tmpRaycaster)
            this.tmpRaycaster = new index_1.Raycaster();
        if (!this.tmpVector3)
            this.tmpVector3 = new index_1.Vector3();
        // holds the position we want to return later
        let position;
        // add plane parallel to camera
        this.tmpPlane.setRotationFromEuler(this.camera.rotation);
        const p = this.camera.position;
        this.tmpPlane.position.set(p.x, p.y, p.z);
        // adjust the distance of the plane
        this.camera.getWorldDirection(this.tmpVector3);
        this.tmpPlane.position.add(this.tmpVector3.clone().multiplyScalar(distanceFromCamera));
        this.tmpPlane.updateMatrix();
        this.tmpPlane.updateMatrixWorld(true);
        // raycast
        this.tmpRaycaster.setFromCamera({ x, y }, this.camera);
        // check intersection with plane
        const intersects = this.tmpRaycaster.intersectObjects([this.tmpPlane]);
        if (((_a = intersects[0]) === null || _a === void 0 ? void 0 : _a.object.name) === '_tmp_raycast_plane')
            position = intersects[0].point;
        return position;
    }
}
exports.default = Transform;
//# sourceMappingURL=transform.js.map