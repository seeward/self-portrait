"use strict";
/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2020 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|GNU GPLv3}
 */
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("@enable3d/three-graphics/dist/index");
class Project extends index_1.ThreeGraphics {
    constructor(projectConfig) {
        var _a;
        super(projectConfig);
        this.projectConfig = projectConfig;
        this.scenes = new Map();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        if (this.projectConfig.parent)
            this.parent = document.getElementById(this.projectConfig.parent);
        else
            this.parent = document.body;
        if (!this.parent) {
            console.warn(`[enable3d] parent "${this.projectConfig.parent}" not found! Will add it to the body.`);
            this.parent = document.body;
        }
        this.parent.appendChild(this.renderer.domElement);
        this.canvas = this.renderer.domElement;
        let firstSceneKey = '';
        this.projectConfig.scenes.forEach((scene, i) => {
            const s = new scene();
            if (i === 0)
                firstSceneKey = s.sceneKey;
            const plug = {
                // scene configuration
                sceneConfig: {
                    textureAnisotropy: this.textureAnisotropy,
                    autoStart: false
                },
                // add core features from three-graphicsconfig: {
                renderer: this.renderer,
                parent: this.parent,
                canvas: this.canvas,
                scene: this.scene,
                scenes: this.scenes,
                camera: this.camera,
                cache: this.cache,
                physics: this.physics
            };
            s.initializeScene(plug);
            if (i === 0) {
                s.setSize(this.parent.clientWidth, this.parent.clientHeight);
                s.setPixelRatio(Math.max(1, window.devicePixelRatio / 2));
            }
            this.scenes.set(s.sceneKey, s);
        });
        // start the first scene
        (_a = this.scenes.get(firstSceneKey)) === null || _a === void 0 ? void 0 : _a.start(firstSceneKey);
    }
}
exports.Project = Project;
//# sourceMappingURL=project.js.map