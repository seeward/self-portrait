/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2020 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|GNU GPLv3}
 */
import { AnimationClip, AnimationMixer, Mesh, Line, Points, Object3D } from '@enable3d/three-wrapper/dist/index';
import PhysicsBody from './physicsBody';
export interface ExtendedObject3D extends Line, Mesh, Points {
    isLine: any;
    isPoints: any;
    isMesh: any;
    type: any;
}
/**
 * Extends the Object3D class from THREE.js and implements properties from Line, Mesh and Points.
 */
export declare class ExtendedObject3D extends Object3D {
    private vector3;
    readonly isGroup = false;
    shape: string;
    name: string;
    body: PhysicsBody;
    hasBody: boolean;
    fragmentDepth: number;
    breakable: boolean;
    private anims;
    private _currentAnimation;
    private _animationActions;
    private _animationMixer;
    constructor();
    /** setAction(name) is deprecated. Use animation.play(name) instead! */
    setAction(name: string): void;
    /** Returns all values relative to the world. */
    get world(): {
        theta: number;
        phi: number;
    };
    /** Get the theta relative to the world. */
    private get worldTheta();
    /** Get the phi relative to the world. */
    private get worldPhi();
    get animation(): {
        current: string;
        add: (key: string, animation: AnimationClip) => void;
        play: (name: string, transitionDuration?: number, loop?: boolean) => void;
        mixer: AnimationMixer;
    };
    set animationMixer(animationMixer: AnimationMixer);
    get animationMixer(): AnimationMixer;
    private animationAdd;
    private animationPlay;
}
export default ExtendedObject3D;
//# sourceMappingURL=extendedObject3D.d.ts.map